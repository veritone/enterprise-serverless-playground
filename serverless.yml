service: enterprise-serverless-prototype
frameworkVersion: '3'

plugins:
  - serverless-plugin-typescript
  - serverless-plugin-include-dependencies

provider:
  name: aws
  runtime: nodejs16.x
  stage: test
  region: us-east-2

functions:
  hello:
    handler: src/hello.handler
    events:
      - http:
          method: get
          path: /hello
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: EnterpriseCognitoAuthorizer #ApiGatewayAuthorizer
            scopes:
              - Something/hello

resources:
  Resources:
#    EnterpriseServerlessPlayground:
#      Type: AWS::Serverless::Api
#      Properties:
#        StageName: test
#        Cors: "'*'"
#        Auth:
#          DefaultAuthorizer: EnterprisePlaygroundAuthorizer
#          Authorizers:
#            EnterprisePlaygroundAuthorizer:
#              UserPoolArn: !GetAtt EnterprisePlaygroundPool.Arn
    EnterpriseCognitoAuthorizer:
      DependsOn:
        - ApiGatewayRestApi
      Type: AWS::ApiGateway::Authorizer
      Properties:
        AuthorizerResultTtlInSeconds: 300
        IdentitySource: method.request.header.Authorization
        Name: cognito-authorizer
        RestApiId:
          # TODO: we need something to ref here. Commented out above because I didn't know how to make it.
          Ref: ApiGatewayRestApi
        Type: COGNITO_USER_POOLS
        ProviderARNs:
          - Fn::GetAtt:
              - EnterprisePrototype
              - Arn
    # TODO: Figure out authorizer and figure out how to put it on an endpoint.
    EnterprisePrototype:
      Type: AWS::Cognito::UserPool
      # TODO: Properties need to be figured out and match document.
      # TODO: We need the domain in order to set up M2M clients with client-credentials.
      Properties:
        UserPoolName: ${self:service}-cognito-userpool-${self:provider.stage}
        AdminCreateUserConfig:
          AllowAdminCreateUserOnly: True
        AccountRecoverySetting:
          RecoveryMechanisms:
            - Name: admin_only
              Priority: 1
        MfaConfiguration: OFF
        #AutoVerifiedAttributes:
        #  - phone_number
        #SmsConfiguration:
        #  -
        UsernameAttributes:
          - email
        Policies:
          PasswordPolicy:
            MinimumLength: 8
            RequireLowercase: True
            RequireNumbers: True
            RequireSymbols: True
            RequireUppercase: True
            TemporaryPasswordValidityDays: 7
        Schema:
          - Name: "name"
            Required: True
            Mutable: True
          - Name: "email"
            Required: True
            Mutable: True
    EnterprisePrototypeCognitoDomain:
      Type: AWS::Cognito::UserPoolDomain
      Properties:
        Domain: ${self:service}-${self:provider.stage}
        UserPoolId:
          Ref: EnterprisePrototype
    EnterprisePrototypePoolResourceServer:
      Type: AWS::Cognito::UserPoolResourceServer
      Properties:
        Name: ${self:service}
        # TODO: This should be the URL for Enterprise, not this. How can we get that?
        Identifier: Something
        CertificateArn:
        Scopes:
          - ScopeName: hello
            ScopeDescription: say hello
        UserPoolId:
          Ref: EnterprisePrototype
    EnterprisePrototypePoolClient:
      Type: AWS::Cognito::UserPoolClient
      Properties:
        ClientName: PandoLogic
        GenerateSecret: true
        AllowedOAuthFlows:
          - client_credentials
        AllowedOAuthScopes:
          - Something/hello
        UserPoolId:
          Ref: EnterprisePrototype
